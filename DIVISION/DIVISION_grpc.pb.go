// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: DIVISION/DIVISION.proto

package GrpcServerDivision

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PBFTServiceClient is the client API for PBFTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PBFTServiceClient interface {
	ProcessComputation(ctx context.Context, in *ComputationRequest, opts ...grpc.CallOption) (*Result, error)
	DivisionMethod(ctx context.Context, in *DivisionRequest, opts ...grpc.CallOption) (*DivisionResponse, error)
}

type pBFTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPBFTServiceClient(cc grpc.ClientConnInterface) PBFTServiceClient {
	return &pBFTServiceClient{cc}
}

func (c *pBFTServiceClient) ProcessComputation(ctx context.Context, in *ComputationRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ADD.PBFTService/ProcessComputation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTServiceClient) DivisionMethod(ctx context.Context, in *DivisionRequest, opts ...grpc.CallOption) (*DivisionResponse, error) {
	out := new(DivisionResponse)
	err := c.cc.Invoke(ctx, "/ADD.PBFTService/DivisionMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PBFTServiceServer is the server API for PBFTService service.
// All implementations must embed UnimplementedPBFTServiceServer
// for forward compatibility
type PBFTServiceServer interface {
	ProcessComputation(context.Context, *ComputationRequest) (*Result, error)
	DivisionMethod(context.Context, *DivisionRequest) (*DivisionResponse, error)
	mustEmbedUnimplementedPBFTServiceServer()
}

// UnimplementedPBFTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPBFTServiceServer struct {
}

func (UnimplementedPBFTServiceServer) ProcessComputation(context.Context, *ComputationRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessComputation not implemented")
}
func (UnimplementedPBFTServiceServer) DivisionMethod(context.Context, *DivisionRequest) (*DivisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DivisionMethod not implemented")
}
func (UnimplementedPBFTServiceServer) mustEmbedUnimplementedPBFTServiceServer() {}

// UnsafePBFTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PBFTServiceServer will
// result in compilation errors.
type UnsafePBFTServiceServer interface {
	mustEmbedUnimplementedPBFTServiceServer()
}

func RegisterPBFTServiceServer(s grpc.ServiceRegistrar, srv PBFTServiceServer) {
	s.RegisterService(&PBFTService_ServiceDesc, srv)
}

func _PBFTService_ProcessComputation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).ProcessComputation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ADD.PBFTService/ProcessComputation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).ProcessComputation(ctx, req.(*ComputationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFTService_DivisionMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServiceServer).DivisionMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ADD.PBFTService/DivisionMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServiceServer).DivisionMethod(ctx, req.(*DivisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PBFTService_ServiceDesc is the grpc.ServiceDesc for PBFTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PBFTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ADD.PBFTService",
	HandlerType: (*PBFTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessComputation",
			Handler:    _PBFTService_ProcessComputation_Handler,
		},
		{
			MethodName: "DivisionMethod",
			Handler:    _PBFTService_DivisionMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DIVISION/DIVISION.proto",
}

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (Health_WatchClient, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/ADD.Health/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (Health_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Health_ServiceDesc.Streams[0], "/ADD.Health/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Health_WatchClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type healthWatchClient struct {
	grpc.ClientStream
}

func (x *healthWatchClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility
type HealthServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(*HealthCheckRequest, Health_WatchServer) error
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (UnimplementedHealthServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedHealthServer) Watch(*HealthCheckRequest, Health_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ADD.Health/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Health_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthServer).Watch(m, &healthWatchServer{stream})
}

type Health_WatchServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type healthWatchServer struct {
	grpc.ServerStream
}

func (x *healthWatchServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ADD.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Health_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Health_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "DIVISION/DIVISION.proto",
}
